<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Diagnostics.NETCore.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient">
            <summary>
            This is a top-level class that contains methods to send various diagnostics command to the runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.StartEventPipeSession(System.Collections.Generic.IEnumerable{Microsoft.Diagnostics.NETCore.Client.EventPipeProvider},System.Boolean,System.Int32)">
            <summary>
            Start tracing the application and return an EventPipeSession object
            </summary>
            <param name="providers">An IEnumerable containing the list of Providers to turn on.</param>
            <param name="requestRundown">If true, request rundown events from the runtime</param>
            <param name="circularBufferMB">The size of the runtime's buffer for collecting events in MB</param>
            <returns>
            An EventPipeSession object representing the EventPipe session that just started.
            </returns> 
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.WriteDump(Microsoft.Diagnostics.NETCore.Client.DumpType,System.String,System.Boolean)">
            <summary>
            Trigger a core dump generation.
            </summary> 
            <param name="dumpType">Type of the dump to be generated</param>
            <param name="dumpPath">Full path to the dump to be generated. By default it is /tmp/coredump.{pid}</param>
            <param name="logDumpGeneration">When set to true, display the dump generation debug log to the console.</param>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.AttachProfiler(System.TimeSpan,System.Guid,System.String,System.Byte[])">
            <summary>
            Attach a profiler.
            </summary>
            <param name="attachTimeout">Timeout for attaching the profiler</param>
            <param name="profilerGuid">Guid for the profiler to be attached</param>
            <param name="profilerPath">Path to the profiler to be attached</param>
            <param name="additionalData">Additional data to be passed to the profiler</param>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.DiagnosticsClient.GetPublishedProcesses">
            <summary>
            Get all the active processes that can be attached to.
            </summary>
            <returns>
            IEnumerable of all the active process IDs.
            </returns>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.EventPipeSession.Stop">
            <summary>
             Stops the given session
            </summary>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.IpcClient.GetTransport(System.Int32)">
            <summary>
            Get the OS Transport to be used for communicating with a dotnet process.
            </summary>
            <param name="processId">The PID of the dotnet process to get the transport for</param>
            <returns>A System.IO.Stream wrapper around the transport</returns>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessage(System.Int32,Microsoft.Diagnostics.NETCore.Client.IpcMessage)">
            <summary>
            Sends a single DiagnosticsIpc Message to the dotnet process with PID processId.
            </summary>
            <param name="processId">The PID of the dotnet process</param>
            <param name="message">The DiagnosticsIpc Message to be sent</param>
            <returns>The response DiagnosticsIpc Message from the dotnet process</returns>
        </member>
        <member name="M:Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessage(System.Int32,Microsoft.Diagnostics.NETCore.Client.IpcMessage,Microsoft.Diagnostics.NETCore.Client.IpcMessage@)">
            <summary>
            Sends a single DiagnosticsIpc Message to the dotnet process with PID processId
            and returns the Stream for reuse in Optional Continuations.
            </summary>
            <param name="processId">The PID of the dotnet process</param>
            <param name="message">The DiagnosticsIpc Message to be sent</param>
            <param name="response">out var for response message</param>
            <returns>The response DiagnosticsIpc Message from the dotnet process</returns>
        </member>
        <member name="T:Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType">
            <summary>
            Different diagnostic message types that are handled by the runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType.GenerateCoreDump">
            <summary>
            Initiates core dump generation 
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType.StartEventPipeTracing">
            <summary>
            Starts an EventPipe session that writes events to a file when the session is stopped or the application exits.
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType.StopEventPipeTracing">
            <summary>
            Stops an EventPipe session.
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType.CollectEventPipeTracing">
            <summary>
            Starts an EventPipe session that sends events out-of-proc through IPC.
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.DiagnosticsMessageType.AttachProfiler">
            <summary>
            Attaches a profiler to an existing process
            </summary>
        </member>
        <member name="T:Microsoft.Diagnostics.NETCore.Client.MessageHeader">
            <summary>
            Message header used to send commands to the .NET Core runtime through IPC.
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.MessageHeader.RequestType">
            <summary>
            Request type.
            </summary>
        </member>
        <member name="F:Microsoft.Diagnostics.NETCore.Client.MessageHeader.Pid">
            <summary>
            Remote process Id.
            </summary>
        </member>
    </members>
</doc>
